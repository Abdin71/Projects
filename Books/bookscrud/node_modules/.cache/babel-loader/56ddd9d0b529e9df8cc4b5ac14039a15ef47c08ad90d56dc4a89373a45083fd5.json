{"ast":null,"code":"export const loginUser = async credentials => {\n  try {\n    const response = await fetch('http://localhost:5252/api/Auth/login', {\n      method: 'POST',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const getBooks = async () => {\n  try {\n    const response = await fetch('http://localhost:5252/api/Books', {\n      method: 'GET',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    console.log(data);\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const getQuotes = async () => {\n  try {\n    const response = await fetch('http://localhost:5252/api/Quotes', {\n      method: 'GET',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const addBook = async (book, token) => {\n  try {\n    const response = await fetch('http://localhost:5252/api/Books', {\n      method: 'POST',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(book)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const addQoute = async (quote, token) => {\n  try {\n    const response = await fetch('http://localhost:5252/api/Quotes', {\n      method: 'POST',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(quote)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const editBook = async (book, token) => {\n  try {\n    const response = await fetch(`http://localhost:5252/api/Books/${book.id}`, {\n      method: 'PUT',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(book)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const editQoute = async (quote, token) => {\n  try {\n    const response = await fetch(`http://localhost:5252/api/Quotes/${quote.id}`, {\n      method: 'PUT',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(quote)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const deleteBook = async (id, token) => {\n  try {\n    const response = await fetch(`http://localhost:5252/api/Books/${id}`, {\n      method: 'DELETE',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};\nexport const deleteQuote = async (id, token) => {\n  try {\n    const response = await fetch(`http://localhost:5252/api/Quotes/${id}`, {\n      method: 'DELETE',\n      mode: 'cors',\n      // Allow cross-origin requests\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data; // Return the response data\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return null; // Return null if an error occurs\n  }\n};","map":{"version":3,"names":["loginUser","credentials","response","fetch","method","mode","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","getBooks","log","getQuotes","addBook","book","token","addQoute","quote","editBook","id","editQoute","deleteBook","deleteQuote"],"sources":["/Users/abdinasir/Documents/bookscrud/src/fetch.js"],"sourcesContent":["export const loginUser = async (credentials) => {\n    try {\n        const response = await fetch('http://localhost:5252/api/Auth/login', {\n            method: 'POST',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}\n\nexport const getBooks = async () => {\n    try {\n        const response = await fetch('http://localhost:5252/api/Books', {\n            method: 'GET',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        console.log(data);\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}    \n\nexport const getQuotes = async () => {\n    try {\n        const response = await fetch('http://localhost:5252/api/Quotes', {\n            method: 'GET',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n} \n\nexport const addBook = async (book, token) => {\n    try {\n        const response = await fetch('http://localhost:5252/api/Books', {\n            method: 'POST',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(book)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}\n\nexport const addQoute = async (quote, token) => {\n    try {\n        const response = await fetch('http://localhost:5252/api/Quotes', {\n            method: 'POST',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(quote)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}\n\nexport const editBook = async (book, token) => {\n    try {\n        const response = await fetch(`http://localhost:5252/api/Books/${book.id}`, {\n            method: 'PUT',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(book)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}\n\nexport const editQoute = async (quote, token) => {\n    try {\n        const response = await fetch(`http://localhost:5252/api/Quotes/${quote.id}`, {\n            method: 'PUT',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(quote)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}\n\nexport const deleteBook = async (id, token) => {\n    try {\n        const response = await fetch(`http://localhost:5252/api/Books/${id}`, {\n            method: 'DELETE',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}\n\nexport const deleteQuote = async (id, token) => {\n    try {\n        const response = await fetch(`http://localhost:5252/api/Quotes/${id}`, {\n            method: 'DELETE',\n            mode: 'cors', // Allow cross-origin requests\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json(); // Parse JSON response\n        return data; // Return the response data\n    } catch (error) {\n        console.error('Error logging in:', error);\n        return null; // Return null if an error occurs\n    }\n}\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}